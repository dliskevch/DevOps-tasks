#----------------------------------------------------
#
# Using Ingress - Services - Deployment - HA for runing application
#
# Work with Config Maps and Secrets like environment and volumes
#
#----------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: homework-project
  labels:
    app: web
    env  : prod
    owner: Dmytro Liskevych
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: myapps
  template:
    metadata:
      labels:
        app.kubernetes.io/name: myapps
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        # image: sv301185/new_one:v_1
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
                                     # from the key name in the ConfigMap.
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: ui_properties_file_name # The key to fetch.
        - name: MY_ROOT_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: secret-basic-auth
              key: password
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: workdir
          mountPath: "/usr/share/nginx/html"
        - name: config
          mountPath: "/config"
          readOnly: true
        - name: conf
          mountPath: "/conf/hello.txt"
          subPath: "user-interface.properties"
          readOnly: true
        - name: all-in-one
          mountPath: "/projected-volume"
          readOnly: true
        # - mountPath: "/var/www/html"
        #   name: mypd
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          successThreshold: 1
          failureThreshold: 1
          periodSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          successThreshold: 1
          failureThreshold: 1
          periodSeconds: 1
      # imagePullSecrets:
      # - name: regcred
      initContainers:
      - name: install
        image: busybox:latest
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TEXT_HTML
          valueFrom:
              configMapKeyRef:
                name: game-demo           # The ConfigMap this value comes from.
                key: text_for_html_page # The key to fetch.
        command: ["/bin/sh"]
        args: ["-c", 'echo "<html><h1>$TEXT_HTML $POD_NAME</h1><html>" >> /work-dir/index.html']
        volumeMounts:
        - name: workdir
          mountPath: "/work-dir"

      volumes:
      - name: workdir
        emptyDir: {}
      - name: config
        configMap:
          # Provide the name of the ConfigMap you want to mount.
          name: game-demo
          # An array of keys from the ConfigMap to create as files
          items:
          - key: "game.properties"
            path: "game.properties"
          - key: "user-interface.properties"
            path: "user-interface.properties"
      - name: conf
        configMap:
          name: game-demo
          items:
          - key: "user-interface.properties"
            path: "user-interface.properties"
          - key: "game.properties"
            path: "game.properties"
      - name: all-in-one
        projected:
          sources:
          - secret:
              name: secret-basic-auth
          - configMap:
              name: game-demo
      # - name: mypd
      #   persistentVolumeClaim:
      #     claimName: myclaim

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: homework-project
spec:
  scaleTargetRef:
    apiVersion: apps/v2beta1v1
    kind: Deployment
    name: homework-project
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 70
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: 80

---
apiVersion: v1
kind: Service
metadata:
  name: homework-project
  labels:
     env  : prod
     owner: Dmytro-Liskevych
spec:
  selector:
    app.kubernetes.io/name: myapp
  ports:
    - name      : app-listener
      protocol  : TCP
      port      : 80
      targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-homework
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: "dl.com"
    http:
      paths:
      - pathType: Prefix
        path: "/home"
        backend:
          service:
            name: homework-project
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  text_for_html_page: "Hi I am from Init container and my PodName is"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true

---
apiVersion: v1
kind: Secret
metadata:
  name: secret-basic-auth
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: t0p-Secret

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: myclaim
# spec:
#   accessModes:
#     - ReadWriteOnce
#   volumeMode: Filesystem
#   resources:
#     requests:
#       storage: 1Gi
#   storageClassName: slow
#   # selector:
#   #   matchLabels:
#   #     release: "stable"
